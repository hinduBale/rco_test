one_child_parents <- parent_ids[ # parents with unique child
!(duplicated(parent_ids) | duplicated(parent_ids, fromLast = TRUE))
]
fpd <- pd[!pd$id %in% one_child_parents, ] # remove one-child-parents
one_child_parents <- one_child_parents[one_child_parents > 0]
for (ocp in one_child_parents) { # new parent will be the grandpa
fpd$parent[fpd$parent == ocp] <- pd$parent[pd$id == ocp]
}
fpd
}
# Returns the pd with only roots.
#
# @param pd a parsed data data.frame.
#
get_roots <- function(pd) {
pd[!pd$parent %in% pd$id, ]
}
# Converts equal_assign to an expr.
#
# @param pd A parsed data data.frame.
#
eq_assign_to_expr <- function(pd) {
# different R versions have different tokens for `equal_assign`
# first convert `equal_assign` and `expr_or_assign_or_help` token to expr
pd$token <- sub("^equal_assign$|^expr_or_assign_or_help$", "expr", pd$token)
eq_ass_prnts_id <- pd$parent[pd$token == "EQ_ASSIGN"]
eq_ass_prnts <- pd[pd$id %in% eq_ass_prnts_id, ]
if (all(eq_ass_prnts_id > 0) && # all of them have a parent
all(eq_ass_prnts$token == "expr") && # all parents are expressions
all(sapply(eq_ass_prnts$id, function(id) sum(pd$parent == id) == 3))) {
# all EQ_ASSIGN have 2 siblings ( expr EQ_ASSIGN expr_or_assign )
return(pd)
}
# if not, for each EQ_ASSIGN create its `expr` parent
pd <- pd[order(pd$pos_id), ] # pos_id is important here
eq_assign_ids <- pd[pd$token == "EQ_ASSIGN", "id"]
new_pd <- pd
# equal_assign : expr EQ_ASSIGN (expr | equal_assign)
for (i in sort(eq_assign_ids, decreasing = TRUE)) {
act_idx <- which(new_pd$id == i)
act_pd <- new_pd[act_idx + -1:1, ]
new_pd <- new_pd[-(act_idx + -1:1), ]
expr_pd <- act_pd[1, ]
act_pd$pos_id[[1]] <- act_pd$pos_id[[1]] + 10e-4
expr_pd$token <- "expr"
expr_pd$terminal <- FALSE
expr_pd$text <- paste(act_pd$text, collapse = " ")
expr_pd$id <- paste0(expr_pd$id, "_EQ_ASS")
act_pd$parent <- expr_pd$id
new_pd <- rbind(new_pd, expr_pd, act_pd)
new_pd <- new_pd[order(new_pd$pos_id), ]
}
new_pd
}
# Copies relevant information from a pd to a new pd.
#
# @param pd_from A parsed data data.frame from which to copy information.
# @param pd_replace A parsed data data.frame to which paste information.
#
replace_pd <- function(pd_from, pd_replace) {
pd_replace <- pd_replace[order(pd_replace$pos_id), ]
from_root <- get_roots(pd_from) # it must be one row
replace_root <- get_roots(pd_replace) # it must be one row
new_pd <- pd_replace
# from old pd parent, copy to new parent: id, parent, and pos
new_pd[pd_replace$id == replace_root$id, c("id", "parent", "pos_id")] <-
from_root[, c("id", "parent", "pos_id")]
# new pd first childs have to point to new parent id
new_pd$parent[pd_replace$parent == replace_root$id] <- from_root$id
# create a fake ids to every node except parent
new_pd[pd_replace$id != replace_root$id, "id"] <-
paste0(from_root$id, "_", new_pd$id[pd_replace$id != replace_root$id])
# fix parents for new pd (not parent, nor first childs)
new_pd$parent[
pd_replace$id != replace_root$id & pd_replace$parent != replace_root$id
] <-
paste0(
from_root$id, "_",
new_pd$parent[pd_replace$id != replace_root$id &
pd_replace$parent != replace_root$id]
)
# fix pos_ids
new_pd$pos_id <- create_new_pos_id(pd_from, nrow(new_pd), from_root$id)
# copy first prev_spaces, and last next_spaces and lines
from_terms <- pd_from[pd_from$terminal, ]
fst_term <- from_terms[which.min(from_terms$pos_id), ]
last_term <- from_terms[which.max(from_terms$pos_id), ]
new_terms <- new_pd$id[new_pd$terminal]
# if first or last token was a precedence op then add at least 1 extra space
if (fst_term$prev_spaces != 0 || fst_term$token %in% c("'{'", "'('")) {
new_pd$prev_spaces[new_pd$id == new_terms[[1]]] <-
max(fst_term$prev_spaces, fst_term$token %in% c("'{'", "'('"))
}
if (last_term$next_spaces != 0 || last_term$token %in% c("'}'", "')'")) {
new_pd$next_spaces[new_pd$id == new_terms[[length(new_terms)]]] <-
max(last_term$next_spaces, last_term$token %in% c("'}'", "')'"))
}
if (last_term$next_lines != 0) {
new_pd$next_lines[new_pd$id == new_terms[[length(new_terms)]]] <-
last_term$next_lines
}
new_pd
}
# Given a pd and from or to id, it creates n new pos_ids.
#
# @param pd A parsed data data.frame.
# @param n A numeric indicating the number of pos_ids to create.
# @param from_id A numeric indicating starting pos_id node.
# @param to_id A numeric indicating ending pos_id node.
#
create_new_pos_id <- function(pd, n, from_id = "", to_id = "") {
pd <- pd[order(pd$pos_id), ]
from_pos <- which(pd$id == from_id)
to_pos <- which(pd$id == to_id)
from_pos_id <- utils::head(c(pd$pos_id[from_pos], pd$pos_id[to_pos - 1]), 1)
to_pos_id <- utils::head(c(pd$pos_id[to_pos], pd$pos_id[from_pos + 1]), 1)
if (from_id != "" && length(from_pos_id) > 0) {
from_pos_id + (10e-4 * seq_len(n))
} else if (to_id != "" && length(to_pos_id) > 0) {
rev(to_pos_id - (10e-4 * seq_len(n)))
}
}
# Returns the pd, where branches starting from ids were removed
#
# @param pd A parsed data data.frame.
# @param ids A vector of ids of branches to remove.
#
remove_nodes <- function(pd, ids) {
to_remove_pd <- get_children(pd, ids)
pd[!pd$id %in% to_remove_pd$id, ]
}
# Returns the pd, where branches starting from ids were removed, but keeps
# trailing lines and spaces.
#
# @param pd A parsed data data.frame.
# @param ids A vector of ids of branches to remove.
#
pretty_remove_nodes <- function(pd, ids) {
to_remove_pd <- get_children(pd, ids)
new_pd <- pd[!pd$id %in% to_remove_pd$id, ]
for (act_id in ids) {
act_rm_pd <- get_children(to_remove_pd, act_id)
# check if parent is loop or if, and doesnt have '{ }'
rm_sblngs <- new_pd[new_pd$parent ==
act_rm_pd$parent[act_rm_pd$id == act_id], ]
if (any(c("IF", "ELSE", loops) %in% rm_sblngs$token) &&
!"'{'" %in% rm_sblngs$token) {
# add an {} after loop or if
new_pd <- rbind(new_pd, replace_pd(act_rm_pd, parse_text("{}")))
next
}
rm_last_term_id <- utils::tail(act_rm_pd$id[act_rm_pd$terminal], 1)
rm_last_term <- act_rm_pd[act_rm_pd$id == rm_last_term_id, ]
kp_last_term_id <- utils::tail(new_pd$id[new_pd$terminal &
new_pd$pos_id < rm_last_term$pos_id], 1)
kp_last_term <- new_pd[new_pd$id == kp_last_term_id, ]
new_pd$next_lines[new_pd$id == kp_last_term_id] <-
max(rm_last_term$next_lines, kp_last_term$next_lines)
new_pd$next_spaces[new_pd$id == kp_last_term_id] <-
max(rm_last_term$next_spaces, kp_last_term$next_spaces)
}
new_pd
}
############################################################################################################################################################################################
#Suppose this is the deparsed code that we recieve.
############################################################################################################################################################################################
texts <-  list(paste(
"points <- data.frame(x = rnorm(100), y = rnorm(100))",
"points[, 2]",
"# This is a comment!!",
"points[[2]]",
"points$y",
"yo <- 1",
"yo",
"points[[c(2)]]",
".subset2(points, 2)",
sep <- "\n"
))
pd <- parse_text(texts)
############################################################################################################################################################################################
#Suppose this is the deparsed code that we recieve.
############################################################################################################################################################################################
texts <-  list(paste(
"points <- data.frame(x = rnorm(100), y = rnorm(100))",
"points[, 2]",
"# This is a comment!!",
"points[[2]]",
"points$y",
"yo <- 1",
"yo",
"points[[c(2)]]",
".subset2(points, 2)",
sep <- "\n"
))
pd <- parse_text(texts)
############################################################################################################################################################################################
#Suppose this is the deparsed code that we recieve.
############################################################################################################################################################################################
texts <-  list(paste("mtcars[ , 11]",
"#This is a comment!!",
"mtcars [[11]]",
"mtcars$carb",
"yo <- 1",
"yo",
"mtcars[[c(11)]]",
".subset2(mtcars, 11)",
sep = "\n"))
pd <- parse_text(texts)
pd
############################################################################################################################################################################################
#Suppose this is the deparsed code that we recieve.
############################################################################################################################################################################################
texts <-  list(paste("points <- data.frame(x = rnorm(100), y = rnorm(100))",
"#This is a comment!!",
"mtcars [[11]]",
"mtcars$carb",
"yo <- 1",
"yo",
"mtcars[[c(11)]]",
".subset2(mtcars, 11)",
sep = "\n"))
pd <- parse_text(texts)
pd
############################################################################################################################################################################################
#Suppose this is the deparsed code that we recieve.
############################################################################################################################################################################################
texts <-  list(paste("points <- data.frame(x = rnorm(100), y = rnorm(100))",
"#This is a comment!!",
"points[ ,2]",
"points [[2]]",
"points$y",
"yo <- 1",
"yo",
"mtcars[[c(2)]]",
".subset2(points, 11)",
sep = "\n"))
pd <- parse_text(texts)
fpd_ <- flatten_leaves(pd)
comments_df <- fpd_[fpd_$parent < 0, ]
fpd <- fpd_[fpd_$parent >= 0, ]
exam_nodes <- get_roots(fpd)
replace_text <- NULL
has_dollar_sign <- function(fpd, node_id)
{
test_dollar_df <- fpd[fpd$parent == node_id, ]
dollar <- match("'$'", test_dollar_df$token)
dollar_flag <- (!(is.na(dollar)))
return (dollar_flag)
}
dollar_dataset <- function(fpd, node_id)
{
dollar_loc <- fpd[fpd$parent == node_id & fpd$token == "'$'", ]
replace_df_dollar <- fpd[fpd$pos_id < dollar_loc$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
return (replace_df_dollar)
}
dollar_colnum <- function(fpd, node_id)
{
dollar_loc_colnum <- fpd[fpd$parent == node_id & fpd$token == "'$'", ]
replace_colname_dollar <- fpd[fpd$pos_id > dollar_loc_colnum$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
dataset_name <- dollar_dataset(fpd, node_id)
return (which(colnames(dataset_name) == replace_colname_dollar[1]))
}
has_square_brackets <- function(fpd, node_id)
{
test_square <- fpd[fpd$parent == node_id, ]
square <- match("LBB", test_square$token)
square_flag <- (!(is.na(square)))
return (square_flag)
}
square_dataset <- function(fpd, node_id)
{
square_loc <- fpd[fpd$parent == node_id & fpd$token == "LBB", ]
replace_df_square <- fpd[fpd$pos_id < square_loc$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
return (replace_df_square)
}
square_colnum <- function(fpd, node_id)
{
square_loc_colnum <- fpd[fpd$parent == node_id & fpd$token == "LBB", ]
replace_colnum_square1 <- fpd[fpd$pos_id > square_loc_colnum$pos_id & fpd$parent == node_id & fpd$token == "expr", ]$text
replace_colnum_square2 <- fpd[fpd$parent == node_id & fpd$pos_id > square_loc_colnum$pos_id & fpd$token == "NUM_CONST", ]$text
if(length(replace_colnum_square1) == 0)
return (replace_colnum_square2)
return (replace_colnum_square1)
}
has_single_bracket <- function(fpd, node_id)
{
test_single_bracket <- fpd[fpd$parent == node_id, ]
single_bracket <- match("'['", test_single_bracket$token)
single_bracket_flag <- (!(is.na(single_bracket)))
return (single_bracket_flag)
}
single_dataset <- function(fpd, node_id)
{
single_loc <- fpd[fpd$parent == node_id & fpd$token == "'['", ]
replace_df_single <- fpd[fpd$pos_id < single_loc$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
return (replace_df_single)
}
single_colnum <- function(fpd, node_id)
{
single_loc_colnum <- fpd[fpd$parent == node_id & fpd$token == "'['", ]
replace_colnum_dollar <- fpd[fpd$pos_id > single_loc_colnum$pos_id & fpd$parent == node_id & fpd$token == "NUM_CONST", ]$text
return (replace_colnum_dollar)
}
i <- 1
final_exam_nodes <- NULL
data_frame <- NULL
column_name <- NULL
not_to_edit <- NULL
for(i in seq_len(nrow(exam_nodes)))
{
test_id <- exam_nodes[i, ]$id
if(has_dollar_sign(fpd, test_id) == TRUE)
{
data_frame <- append(data_frame, dollar_dataset(fpd, test_id))
column_name <- append(column_name, dollar_colnum(fpd, test_id))
final_exam_nodes <- rbind(final_exam_nodes, exam_nodes[i, ])
}
else if(has_square_brackets(fpd, test_id) == TRUE)
{
data_frame <- append(data_frame, square_dataset(fpd, test_id))
column_name <- append(column_name, square_colnum(fpd, test_id))
final_exam_nodes <- rbind(final_exam_nodes, exam_nodes[i, ])
}
else if(has_single_bracket(fpd, test_id) == TRUE)
{
data_frame <- append(data_frame, single_dataset(fpd, test_id))
column_name <- append(column_name, single_colnum(fpd, test_id))
final_exam_nodes <- rbind(final_exam_nodes, exam_nodes[i, ])
}
else
{
not_to_edit <- rbind(not_to_edit, exam_nodes[i, ])
}
}
final_exam_nodes_duplicate <- final_exam_nodes
j <- 1
for(j in seq_len(nrow(final_exam_nodes)))
{
final_exam_nodes[j, ]$text <- sprintf(".subset2(%s, %s)", data_frame[j], column_name[j])
}
not_to_edit <- rbind(not_to_edit, comments_df)
k <- 1
for(k in seq_len(nrow(not_to_edit)))
{
not_to_edit <- rbind(not_to_edit, fpd[fpd$parent == not_to_edit[k, ]$id, ])
}
not_to_edit <- not_to_edit[order(not_to_edit$pos_id), ]
not_to_edit_duplicate <- not_to_edit
itr <- 1
new_fpd <- NULL
new_fpd <- NULL
for(itr in seq_len(nrow(final_exam_nodes)))
{
act_fpd <- final_exam_nodes[itr, ]
new_act_fpd <- flatten_leaves(parse_text(act_fpd$text))
#Backing up the original new_act_fpd
new_act_fpd_duplicate <- new_act_fpd
#Setting new ids for the newly edited and parsed codes
new_act_fpd$id <- paste0(act_fpd$id, "_", new_act_fpd$id)
#Keeping old parents for new fpd
new_act_fpd$parent[new_act_fpd$parent != 0] <- paste0(act_fpd$id, "_", new_act_fpd$parent[new_act_fpd$parent != 0])
new_act_fpd$parent[new_act_fpd$parent == 0] <- act_fpd$parent
#Calling a pre-wriiten rco::function....
new_act_fpd$pos_id <- create_new_pos_id(act_fpd, nrow(new_act_fpd), act_fpd$id)
#Fixing the next_spaces section of new_fpd
new_act_fpd$next_spaces[nrow(new_act_fpd)] <- act_fpd$next_spaces
#Fixing the next_lines section of new_fpd
new_act_fpd$next_lines[nrow(new_act_fpd)] <- act_fpd$next_lines
#Fixing the prev_spaces section of new_fpd
new_act_fpd$prev_spaces[which(new_act_fpd$terminal)[[1]]] <- act_fpd$prev_spaces
#Merging the new_fpd and the act_fpd(obtained upon iteration)
new_fpd <- rbind(new_fpd, new_act_fpd)
#Ordering the new_fpd according to the pos_id
new_fpd <- new_fpd[order(new_fpd$pos_id), ]
}
############################################################################################################################################################################################
#Merging the new_fpd(derived from final_exam_nodes) with the not_to_edit data.frame into resultant_fpd
############################################################################################################################################################################################
resultant_fpd <- rbind(not_to_edit, new_fpd[order(new_fpd$pos_id), ])
resultant_fpd <- resultant_fpd[order(resultant_fpd$pos_id), ]
resultant_fpd <- flatten_leaves(resultant_fpd)
#Identifying the lines where the new line character has to be introduced.
next_lines <- NULL
next_lines <- resultant_fpd[!resultant_fpd$terminal & resultant_fpd$parent == 0, ]
next_lines <- rbind(next_lines, resultant_fpd[resultant_fpd$parent < 0, ])
next_lines <- next_lines[order(next_lines$pos_id), ]
target_id <- NULL
resultant_fpd[is.na(resultant_fpd)] <- 0 #Replacing the NAs with zeroes.
l <- 1
for(l in seq_len(nrow(next_lines)-1))
{
target_id <- append(target_id, max(resultant_fpd[resultant_fpd$pos_id >= next_lines[l, ]$pos_id & resultant_fpd$pos_id < next_lines[l+1, ]$pos_id, ]$pos_id))
}
target_id <- append(target_id, resultant_fpd[nrow(resultant_fpd), ]$pos_id, )
m <- 1
for(m in seq_len(length(target_id)))
{
resultant_fpd[which(resultant_fpd$pos_id == target_id[m]), ]$next_lines <- 1
}
optimized_text <- deparse_data(resultant_fpd)
optimized_text
texts <- list(paste(
"function(x, n){",
"x[ ,n]",
"}",
sep = "\n"))
pd <- parse_text(texts)
fpd_ <- flatten_leaves(pd)
fpd_
comments_df <- fpd_[fpd_$parent < 0, ]
fpd <- fpd_[fpd_$parent >= 0, ]
exam_nodes <- get_roots(fpd)
replace_text <- NULL
has_dollar_sign <- function(fpd, node_id)
{
test_dollar_df <- fpd[fpd$parent == node_id, ]
dollar <- match("'$'", test_dollar_df$token)
dollar_flag <- (!(is.na(dollar)))
return (dollar_flag)
}
dollar_dataset <- function(fpd, node_id)
{
dollar_loc <- fpd[fpd$parent == node_id & fpd$token == "'$'", ]
replace_df_dollar <- fpd[fpd$pos_id < dollar_loc$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
return (replace_df_dollar)
}
dollar_colnum <- function(fpd, node_id)
{
dollar_loc_colnum <- fpd[fpd$parent == node_id & fpd$token == "'$'", ]
replace_colname_dollar <- fpd[fpd$pos_id > dollar_loc_colnum$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
dataset_name <- dollar_dataset(fpd, node_id)
return (which(colnames(dataset_name) == replace_colname_dollar[1]))
}
has_square_brackets <- function(fpd, node_id)
{
test_square <- fpd[fpd$parent == node_id, ]
square <- match("LBB", test_square$token)
square_flag <- (!(is.na(square)))
return (square_flag)
}
square_dataset <- function(fpd, node_id)
{
square_loc <- fpd[fpd$parent == node_id & fpd$token == "LBB", ]
replace_df_square <- fpd[fpd$pos_id < square_loc$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
return (replace_df_square)
}
square_colnum <- function(fpd, node_id)
{
square_loc_colnum <- fpd[fpd$parent == node_id & fpd$token == "LBB", ]
replace_colnum_square1 <- fpd[fpd$pos_id > square_loc_colnum$pos_id & fpd$parent == node_id & fpd$token == "expr", ]$text
replace_colnum_square2 <- fpd[fpd$parent == node_id & fpd$pos_id > square_loc_colnum$pos_id & fpd$token == "NUM_CONST", ]$text
if(length(replace_colnum_square1) == 0)
return (replace_colnum_square2)
return (replace_colnum_square1)
}
has_single_bracket <- function(fpd, node_id)
{
test_single_bracket <- fpd[fpd$parent == node_id, ]
single_bracket <- match("'['", test_single_bracket$token)
single_bracket_flag <- (!(is.na(single_bracket)))
return (single_bracket_flag)
}
single_dataset <- function(fpd, node_id)
{
single_loc <- fpd[fpd$parent == node_id & fpd$token == "'['", ]
replace_df_single <- fpd[fpd$pos_id < single_loc$pos_id & fpd$parent == node_id & fpd$token == "SYMBOL", ]$text
return (replace_df_single)
}
single_colnum <- function(fpd, node_id)
{
single_loc_colnum <- fpd[fpd$parent == node_id & fpd$token == "'['", ]
replace_colnum_dollar <- fpd[fpd$pos_id > single_loc_colnum$pos_id & fpd$parent == node_id & fpd$token == "NUM_CONST", ]$text
return (replace_colnum_dollar)
}
i <- 1
final_exam_nodes <- NULL
data_frame <- NULL
column_name <- NULL
not_to_edit <- NULL
for(i in seq_len(nrow(exam_nodes)))
{
test_id <- exam_nodes[i, ]$id
if(has_dollar_sign(fpd, test_id) == TRUE)
{
data_frame <- append(data_frame, dollar_dataset(fpd, test_id))
column_name <- append(column_name, dollar_colnum(fpd, test_id))
final_exam_nodes <- rbind(final_exam_nodes, exam_nodes[i, ])
}
else if(has_square_brackets(fpd, test_id) == TRUE)
{
data_frame <- append(data_frame, square_dataset(fpd, test_id))
column_name <- append(column_name, square_colnum(fpd, test_id))
final_exam_nodes <- rbind(final_exam_nodes, exam_nodes[i, ])
}
else if(has_single_bracket(fpd, test_id) == TRUE)
{
data_frame <- append(data_frame, single_dataset(fpd, test_id))
column_name <- append(column_name, single_colnum(fpd, test_id))
final_exam_nodes <- rbind(final_exam_nodes, exam_nodes[i, ])
}
else
{
not_to_edit <- rbind(not_to_edit, exam_nodes[i, ])
}
}
final_exam_nodes_duplicate <- final_exam_nodes
j <- 1
for(j in seq_len(nrow(final_exam_nodes)))
{
final_exam_nodes[j, ]$text <- sprintf(".subset2(%s, %s)", data_frame[j], column_name[j])
}
final_exam_nodes
